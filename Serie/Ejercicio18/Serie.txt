Serie de ejercicios
Curso de programaci√≥n en C#
Febrero de 2020
Serie de ejercicios
1. Programa que permite calcular la suma de los primeros n n√∫meros naturales, siendo n un
n√∫mero natural ingresado por el usuario.
2. Realizar un programa en el que se le pida al usuario dos n√∫meros del 1 al 9, num1 y num2.
Despu√©s va a imprimir todos los n√∫meros naturales del 1 al 100, sin embargo, cuando un
n√∫mero sea m√∫ltiplo de num1 o num2 o contenga alguno de estos n√∫meros, va a imprimir
‚Äòclap‚Äô.
3. Escribir un programa que pida al usuario una cadena de texto e imprima la misma cadena de
texto, pero antes de cada vocal, agregue una f.
Ejemplo:
"Mi nombre es Ana"
"M nfombrfe fes fAnfa"
4. Realizar un programa que imprima la serie de bonacci hasta el elemento n que especique el
usuario.
5. Se debe simular una agenda telef√≥nica. Cuando inicie el programa se debe desplegar un men√∫
con las opciones:
Agregar contacto
Eliminar contacto
Mostrar contacto
Salir
Los contactos van a ser almacenados en un diccionario (investiguen la colecci√≥n Dictionary)
en donde las llaves son los nombres de los contactos y sus valores van a ser los tel√©fonos.
Hacer pruebas en en el m√©todo Main.
6. Se debe dise√±ar una clase CuentaBancaria que va a tener los m√©todos mostrarInformaci√≥n,
dep√≥sito y retiro, como atributos, cada objeto va a tener un saldo y un nombre. El m√©todo
mostrar informaci√≥n va a imprimir el nombre de la cuenta y el saldo, el m√©todo dep√≥sito va
a agregar una cantidad al saldo de la cuenta y va a mostrar informaci√≥n. El m√©todo retiro va
a retirar dinero de la cuenta, pero antes tendr√° que comprobar que se cuente con el dinero
suciente, terminando el retiro va a mostrar informaci√≥n. Cada vez que se cree un objeto,
va a mostrar informaci√≥n de la cuenta. Se debe crear dos objetos y llamar sus m√©todos para
probarlos.
PROGRAMA DE TECNOLOG√çA EN C√ìMPUTO 1
Serie de ejercicios
7. Se debe dise√±ar una clase NumeroComplejo, que va a tener como atributos parteReal y parteImaginaria, 
se debe denir un m√©todo imprimir que va a imprimir el n√∫mero complejo con
formato. Se debe denir un m√©todo para la suma de dos objetos de la clase NumeroComplejo
que retorne un nuevo n√∫mero complejo que sea la suma de los otros dos. A continuaci√≥n se
debe crear dos n√∫meros complejos y probar sus m√©todos.
8. Crear una clase llamada Auto que contenga los siguientes elementos:
Al menos 3 atributos de diferentes tipos.
Constructor por defecto y sobrecarga de constructor.
M√©todos getters y setters para encapsulamiento.
3 m√©todos que pueda realizar un autom√≥vil.
Instanciar 3 objetos y con ellos mandar a llamar a cada uno de los m√©todos realizados (Hacer
uso tambi√©n de los m√©todos set para poder cambiar alguno de sus atributos y de los m√©todos
get para poder imprimir sus datos).
9. Haz una peque√±a investigaci√≥n sobre los m√©todos que se encuentran en la clase Math y para
qu√© sirven. Crea una clase llamada C√≠culo y otra con el nombre de la gura geom√©trica de tu
preferencia. Cada clase deber√° tener sus respectivos atributos y m√©todos de tal manera que
ocupes m√≠nimo tres m√©todos de la clase Math.
Nota: la investigaci√≥n se puede incluir como comentario en su archivo.
10. Realiza una clase llamada "Persona"que tenga los atributos: nombre edad, estatura(metros)
y peso(Kg). El usuario ingresar√° los datos dichos datos. Crea algunos m√©todos (m√≠nimo 3) y
mandalos llamar en una clase principal.
11. Elabora un programa que simule una calculadora de matrices (utilizando arreglos bidimensionales). 
El tama√±o de la matriz (arreglo) deber√° ser ingresado por el usuario, as√≠ como los valores
contenidos en ella. En este caso s√≥lo se soportar√°n matrices cuadradas (nxn). Las operaciones
que deber√° contender la calculadora son:
suma
resta
multiplicaci√≥n
Se puede utilizar cualquier tipo de dato (int, double, oat). El programa debe contener un
men√∫ que me permita elegir entre las operaciones de la calculadora y cuando se hagan las
operaciones, me debe mostrar las matrices que operan, as√≠ como el resultado. Estas matrices
deben mostrarse en su respectivo formato, es decir, cuadradas. Sin importar lo que el usuario
ingrese el programa no debe "morir", usen excepciones para controlar el ingreso de datos del
usuario.
12. Una persona se dirige al BecarioMart a realizar sus compras semanales. Dicha persona no sabe
cu√°ntos productos va a comprar y tampoco sabe su valor. Para poder ayudarlo deber√°s de
implementar dos Listas. Una contiene los nombres de los productos y otro contiene los precios
PROGRAMA DE TECNOLOG√çA EN C√ìMPUTO 2
Serie de ejercicios
de los productos. Tanto el nombre como el precio, deber√°n ser ingresados por el usuario y en
seguida, deber√°n de ser agregados a las listas. Al momento de pagar le aparece una lista de
todos los productos que ha llevado con su respectivo precio, sin embargo, se da cuenta de
que s√≥lo tiene $500.00, por lo que, si ha excedido su cuenta, deber√° elegir unos productos y
dejar otros. Para lograr eso, debe poder acceder al √≠ndice del producto y as√≠ poder elegirlo para
eliminarlo de su lista, hasta que nalmente la cuenta sea menor o igual a los $500.00.
El programa debe preguntar al usuario si desea agregar un producto a su lista, si es as√≠ deber√°
ingresar tanto el nombre como el precio a las Listas. En caso de que ya no quiera agregar m√°s
productos, le aparecer√° en pantalla la lista de todos los productos que ha llevado (nombre y
precio) as√≠ como la suma de los precios. Cuando aparezca la lista, deber√° tener dos opciones:
Comprar.
Dejar productos.
Para la primera opci√≥n deber√°s de tener validaciones para ver si el dinero que tiene es suciente. 
Si el dinero es suciente, deber√° imprimir un mensaje que diga "Gracias por su compra!",
en caso contrario debe mandarlo a la opci√≥n "Dejar productos". Si el usuario elige la opci√≥n 2
deber√° poder ver los √≠ndices de los productos en las listas para as√≠ poder decidir cu√°l eliminar.
Una vez eliminados los productos, debes imprimir de nuevo la lista de productos a comprar
con su precio y darle a elegir de nuevo entre las dos opciones.
13. Se tendr√° una clase llamada Carro que tendr√° de atributos peso y altura junto con un atributo
llamado " encendido" de tipo booleano inicilizado en false. En el constructor deber√°s indicarle
los valores peso y altura.La misma clase contar√° con los m√©todos encender y apagar, que cambiar√°n el 
estado del atributo " encendido" y desplegar√°s un mensaje indicando si se encendi√≥
o se apag√≥.
Crear m√©todos get para poder obtener su peso y altura.
Se contar√° con un m√©todo llamado " Estado"para vericar si el auto se encuentra encendido o no.
El √∫ltimo m√©todo de la clase, es toString() el cual nos servir√° para imprimir un mensaje,
este mensaje deber√° indicar el peso y altura del Carro.
Crear dos clases m√°s que hereden de Carro, con nombres como CarroBWM, CarroVW, etc. Esta
clase tendr√° un atributo llamado modelo. Implementa su constructor y tambi√©n implementa
su m√©todo toString() para que pueda imprimir todos sus atributos. En una clase de prueba(en
el m√©todo Main), crea objetos de las dos clases hijas y manda a llamar todos sus m√©todos. Al
nal deber√° verse una impresi√≥n como la siguiente, para los dos objetos que hayas creado:
>El carro est√° apagado
>El carro est√° encendido
>Est√° encendido
>Tengo turbo
>El peso es: 100,000.
>La altura es: 1.90.
PROGRAMA DE TECNOLOG√çA EN C√ìMPUTO 3
Serie de ejercicios
>El modelo es: BMW
14. Implementa una interfaz con los m√©todos que t√∫ desees. Crear√°s 3 clases diferentes que puedan
hacer uso de esta interfaz, as√≠ como una clase de prueba donde podr√°s probar su uso. Incluir
en comentarios cu√°l es el objetivo de la interfaz.
15. Crea una calculadora que haga operaciones entre dos n√∫meros. Las operaciones que deber√°
soportar ser√°n suma, resta, multiplicaci√≥n y divisi√≥n. El programa debe de contener un men√∫
que me permita elegir cualquier opci√≥n y la √∫ltima de ellas debe ser para salir. Si se termina
una operaci√≥n debo de volver al men√∫ de inicio. No debe haber forma de salirse del programa a
menos que sea con la opci√≥n salir. Considerar todas las excepciones posibles e implementarlas
para evitar errores en tiempo de ejecuci√≥n. Considera: Divisi√≥n entre cero, n√∫meros demasiado
grandes, cadenas en vez de n√∫meros, entre otras que a ti se te puedan ocurrir.
16. Realiza un programa que haga un claro ejemplo de Polimorsmo, estas clases pueden ser de
tu elecci√≥n. Recuerda que polimorsmo no necesariamente es hacer una interfaz o hacer una
clase abstracta.
17. Realiza un programa de tem√°tica libre en donde puedas utilizar los 4 pilares de la Programaci√≥n
Orientada a Objetos.
18. Realizar una investigaci√≥n del manejo de archivos en C# y hacer un programa libre que implique el manejo de archivos.
Notas:
TODOS LOS PROGRAMAS DEBEN ESTAR DOCUMENTADOS PARA HACER M√ÅS F√ÅCIL
SU COMPRENSI√ìN.
Mandar al correo el link del repositorio donde se encuentra la serie.
La serie se env√≠a antes de que comience la clase del martes.
Recuerden que estos ejercicios son para que practiquen sus conceptos. Si tienen alguna duda
recuerden que Google es su mejor amigo y pueden encontrar un mont√≥n de informaci√≥n ah√≠.
Cualquier duda cont√°ctenme pero antes intenten resolver esa duda por su cuenta recuerden
que una de las caracter√≠sticas de un buen programador es que sabe investigar y aprender por
su cuenta.
La serie es individual, no me molesta que se ayuden o se pregunten entre ustedes, despu√©s de
todo los proyectos de la vida real siempre son en equipo, pero si encuentro dos series iguales o
detecto alg√∫n tipo de plagio les bajar√© puntos sobre calicaci√≥n nal, ay√∫dense entre ustedes
pero no se copien las soluciones.
PROGRAMA DE TECNOLOG√çA EN C√ìMPUTO 4